
# Set up usage of precompiled headers.
# kr_set_pch(<precompiled-header> <precompiled-source> [source-file]...)
# precompiled-header: The relative or absolute path to the .h file.
# precompiled-source: The relative or absolute path to the .cpp file that will generate the .pch file.
#
# When using this way of setting up precompiled headers, it is not necessary to include the .h file manually anywhere.
# I.e. no need for manual `#include <stdafx.h>` anymore.
#
# Example:
#   kr_set_pch("pch.h" "pch.cpp")
function(kr_set_pch TARGET_NAME PCH_H)
  if(NOT MSVC)
    return()
  endif()

  # Absolute path of .h file.
  get_filename_component(PCH_H "${PCH_H}" ABSOLUTE)
  #get_filename_component(PCH_CPP "${PCH_CPP}" ABSOLUTE)

  # Generated .cpp file.
  set(PCH_CPP "${CMAKE_CURRENT_BINARY_DIR}/pch.cpp")

  # Generate the .cpp file, if it does not exist yet.
  if(NOT EXISTS "${PCH_CPP}")
    file(WRITE "${PCH_CPP}"
         "// This file was automatically generated by the krepel build system.\n"
         "// This file is empty on purpose.\n"
         "// It is used to create the precompield header file (.pch).\n"
         "// Do not add anything to this file, your changes will be lost!\n"
         "// Do not check it into your VCS.\n")
  endif()

  # Add the .cpp file to the targets source files.
  get_target_property(TARGET_SOURCE_FILES ${TARGET_NAME} SOURCES)
  set_target_properties(${TARGET_NAME} PROPERTIES SOURCES "${PCH_CPP};${TARGET_SOURCE_FILES}")

  # Force include the .h file and usage as precompiled header.
  target_compile_options(${TARGET_NAME} PRIVATE /FI"${PCH_H}" /Yu"${PCH_H}")

  # Add flag to the (generated) .cpp file, which will generate the .pch file.
  set_source_files_properties("${PCH_CPP}" PROPERTIES COMPILE_FLAGS "/Yc\"${PCH_H}\"")

  # Remove it from any standard folders
  source_group("" FILES "${PCH_CPP}")
endfunction()
